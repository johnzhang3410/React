{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johnz\\\\Desktop\\\\WebDev\\\\learn-react\\\\react-task-tracker\\\\src\\\\components\\\\AddTask.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddTask = ({\n  onAdd\n}) => {\n  _s();\n\n  const [text, setText] = useState('');\n  const [day, setDay] = useState('');\n  const [reminder, setReminder] = useState(false); //The original text/day which is empty is the original value for input, use setText/setDay to change text/day\n  //The original reminder is set to false (Checkbox unchecked)\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (!text) {\n      alert('Please add a task');\n      return;\n    }\n\n    onAdd({\n      text,\n      day,\n      reminder\n    });\n    setText('');\n    setDay('');\n    setReminder(false);\n  }; //This function gets called when we are submitting the add-form\n  //if there is no task text, then we pop an alert\n  //If there indeed is input, then we call onAdd to add the task with its inputs of text, day, and reminder (T/F)\n  //after adding the task to task array, we reset everything to their default state (no text/day in inputs, and reminder set to false)\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"add-form\",\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"add Task\",\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Day and Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"add Day & Time\",\n        value: day,\n        onChange: e => setDay(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control form-control-check\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Set Reminder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        value: reminder,\n        onChange: e => setReminder(e.currentTarget.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Save Task\",\n      className: \"btn btn-block\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddTask, \"Aj+4+2kaTLo6CjtAhOIEiZmPaGE=\");\n\n_c = AddTask;\nexport default AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["C:/Users/johnz/Desktop/WebDev/learn-react/react-task-tracker/src/components/AddTask.js"],"names":["React","useState","AddTask","onAdd","text","setText","day","setDay","reminder","setReminder","onSubmit","e","preventDefault","alert","target","value","currentTarget","checked"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,OAAvB;;;AAEA,MAAMC,OAAO,GAAG,CAAE;AAACC,EAAAA;AAAD,CAAF,KAAe;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAE,EAAF,CAAhC;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAE,EAAF,CAA9B;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAE,KAAF,CAAxC,CAH2B,CAI3B;AACA;;AAEJ,QAAMS,QAAQ,GAAIC,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAI,CAACR,IAAL,EAAW;AACPS,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACA;AACH;;AAEDV,IAAAA,KAAK,CAAC;AAAEC,MAAAA,IAAF;AAAQE,MAAAA,GAAR;AAAaE,MAAAA;AAAb,KAAD,CAAL;AAEAH,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,MAAM,CAAC,EAAD,CAAN;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAbD,CAP+B,CAqB/B;AACA;AACA;AACA;;;AAEI,sBACI;AAAM,IAAA,SAAS,EAAC,UAAhB;AAA2B,IAAA,QAAQ,EAAEC,QAArC;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,UAA/B;AAA0C,QAAA,KAAK,EAAEN,IAAjD;AAAuD,QAAA,QAAQ,EAAGO,CAAD,IAAON,OAAO,CAACM,CAAC,CAACG,MAAF,CAASC,KAAV;AAA/E;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,gBAA/B;AAAgD,QAAA,KAAK,EAAET,GAAvD;AAA4D,QAAA,QAAQ,EAAGK,CAAD,IAAOJ,MAAM,CAACI,CAAC,CAACG,MAAF,CAASC,KAAV;AAAnF;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAWI;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,KAAK,EAAEP,QAA9B;AAAwC,QAAA,QAAQ,EAAGG,CAAD,IAAOF,WAAW,CAACE,CAAC,CAACK,aAAF,CAAgBC,OAAjB;AAApE;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ,eAgBI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,WAA3B;AAAuC,MAAA,SAAS,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CA9CD;;GAAMf,O;;KAAAA,O;AAgDN,eAAeA,OAAf","sourcesContent":["import React from 'react'\r\nimport {useState} from 'react'\r\n\r\nconst AddTask = ( {onAdd} ) => {\r\n    const [text, setText] = useState ('')\r\n    const [day, setDay] = useState ('')\r\n    const [reminder, setReminder] = useState (false)\r\n    //The original text/day which is empty is the original value for input, use setText/setDay to change text/day\r\n    //The original reminder is set to false (Checkbox unchecked)\r\n\r\nconst onSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (!text) {\r\n        alert('Please add a task')\r\n        return\r\n    }\r\n\r\n    onAdd({ text, day, reminder })\r\n\r\n    setText('')\r\n    setDay('')\r\n    setReminder(false)\r\n}\r\n//This function gets called when we are submitting the add-form\r\n//if there is no task text, then we pop an alert\r\n//If there indeed is input, then we call onAdd to add the task with its inputs of text, day, and reminder (T/F)\r\n//after adding the task to task array, we reset everything to their default state (no text/day in inputs, and reminder set to false)\r\n\r\n    return (\r\n        <form className='add-form' onSubmit={onSubmit}>\r\n            <div className='form-control'>\r\n                <label>Task</label>\r\n                <input type='text' placeholder='add Task' value={text} onChange={(e) => setText(e.target.value)} />\r\n            </div>\r\n                {/* When user tries to change the text, we use setText with new text being what is entered */ }\r\n            <div className='form-control'>\r\n                <label>Day and Time</label>\r\n                <input type='text' placeholder='add Day & Time' value={day} onChange={(e) => setDay(e.target.value)} />\r\n            </div>\r\n                {/* When changes happen to the input, we change day by setDay to the value entered (The value of event target) */ }\r\n            <div className='form-control form-control-check'>\r\n                <label>Set Reminder</label>\r\n                <input type='checkbox' value={reminder} onChange={(e) => setReminder(e.currentTarget.checked)} />\r\n            </div>\r\n                {/* when user makes change to the checkbox, we use setReminder to change the box to whatever the current target is (true or false) */ }\r\n            <input type='submit' value='Save Task' className='btn btn-block' />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTask\r\n"]},"metadata":{},"sourceType":"module"}