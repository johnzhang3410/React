{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johnz\\\\Desktop\\\\WebDev\\\\learn-react\\\\react-task-tracker\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n//Followed Youtube React Crash Course for this project, original author of code goes to Traversy Media\nimport React from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport { useState } from 'react';\nimport AddTask from './components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false); //initial state of showing the form to add task is set to false (form doesn't show)\n\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    text: 'Doctors Appointment',\n    day: 'Feb 5th at 2:30pm',\n    reminder: true\n  }, {\n    id: 2,\n    text: 'Meeting at School',\n    day: 'Feb 6th at 1:30pm',\n    reminder: true\n  }, {\n    id: 3,\n    text: 'Food Shopping',\n    day: 'Feb 5th at 2:30pm',\n    reminder: false\n  }]); //useState takes in the initial states, tasks is the current state, and setTasks is the function that updates tasks\n  //Add Task\n\n  const addTask = task => {\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  }; //inputs of task, day and reminder plus the new random task id creates the newTask\n  //we then use setTasks to concatenate existing tasks with the newTask\n  //Delete Task\n\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Setting tasks to filtered tasks\n  //we filter the tasks array. id is the task id that we want to delete, and task.id is the same thing. Since they are always the same, they won't pass the function. \n  //When new array is created by filter()， the elements that we want to delete won't exist anymore.\n  //If every element's id is not the same as the id being passed in (the id of the task that we are trying to delete)\n  //return tasks that has a different id from the task id being passed in (the id that we are trying to delete) Unselected tasks gets to stay in the filtered array\n  //Toggle Reminder\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  }; //For every element in the tasks array, if the element id is the same as the id being passed in, it means we want to toggle that particular task, therefore we \n  //set reminder to whatever opposite of task.reminder has\n  //if nothing is passed in (no doubleClick), just display task normally\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 27\n    }, this) : 'No tasks to show']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n/*class App extends React.Component {\n  render() {\n    return <h1>Hello from a class</h1>\n  }\n}*/\n//Class Component\n\n\n_s(App, \"rUyQfW6Soyy23WTDRpMILO3atP4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/johnz/Desktop/WebDev/learn-react/react-task-tracker/src/App.js"],"names":["React","Header","Tasks","useState","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","id","text","day","reminder","addTask","task","Math","floor","random","newTask","deleteTask","filter","toggleReminder","map","length"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACf,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAE,KAAF,CAA9C,CADe,CAEf;;AAEE,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,CACjC;AACIO,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE,qBAFV;AAGIC,IAAAA,GAAG,EAAE,mBAHT;AAIIC,IAAAA,QAAQ,EAAE;AAJd,GADiC,EAOjC;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE,mBAFV;AAGIC,IAAAA,GAAG,EAAE,mBAHT;AAIIC,IAAAA,QAAQ,EAAE;AAJd,GAPiC,EAajC;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE,eAFV;AAGIC,IAAAA,GAAG,EAAE,mBAHT;AAIIC,IAAAA,QAAQ,EAAE;AAJd,GAbiC,CAAD,CAAlC,CAJa,CAwBb;AAEF;;AACA,QAAMC,OAAO,GAAIC,IAAD,IAAU;AACxB,UAAML,EAAE,GAAGM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAoC,CAA/C;AAEA,UAAMC,OAAO,GAAG;AAACT,MAAAA,EAAD;AAAK,SAAGK;AAAR,KAAhB;AACAN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWW,OAAX,CAAD,CAAR;AACD,GALD,CA3Be,CAiCf;AACA;AAEA;;;AACA,QAAMC,UAAU,GAAIV,EAAD,IAAQ;AACzBD,IAAAA,QAAQ,CAACD,KAAK,CAACa,MAAN,CAAcN,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAFD,CArCe,CAwCf;AACA;AACA;AACA;AACA;AAEA;;;AACA,QAAMY,cAAc,GAAIZ,EAAD,IAAQ;AAC7BD,IAAAA,QAAQ,CAACD,KAAK,CAACe,GAAN,CAAWR,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGK,IAAL;AAAWF,MAAAA,QAAQ,EAAE,CAACE,IAAI,CAACF;AAA3B,KAAjB,GAAyDE,IAA7E,CAAD,CAAR;AACD,GAFD,CA/Ce,CAkDf;AACA;AACA;;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,MAAMR,cAAc,CAAC,CAACD,WAAF;AAAnC;AAAA;AAAA;AAAA;AAAA,YADF,EAKGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEQ;AAAhB;AAAA;AAAA;AAAA;AAAA,YALlB,EAOGN,KAAK,CAACgB,MAAN,GAAe,CAAf,gBAAmB,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEhB,KAAd;AAAqB,MAAA,QAAQ,EAAEY,UAA/B;AAA2C,MAAA,QAAQ,EAAEE;AAArD;AAAA;AAAA;AAAA;AAAA,YAAnB,GAA8F,kBAPjG;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;AAED;AACA;AACA;AACA;AACA;AACA;;;GA3ESjB,G;;KAAAA,G;AA6ET,eAAeA,GAAf","sourcesContent":["//Followed Youtube React Crash Course for this project, original author of code goes to Traversy Media\n\nimport React from 'react';\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport { useState } from 'react'\nimport AddTask from './components/AddTask'\n\nfunction App() {\nconst [showAddTask, setShowAddTask] = useState (false)\n//initial state of showing the form to add task is set to false (form doesn't show)\n\n  const [tasks, setTasks] = useState([\n    {\n        id: 1,\n        text: 'Doctors Appointment',\n        day: 'Feb 5th at 2:30pm',\n        reminder: true,\n    },\n    {\n        id: 2,\n        text: 'Meeting at School',\n        day: 'Feb 6th at 1:30pm',\n        reminder: true,\n    },\n    {\n        id: 3,\n        text: 'Food Shopping',\n        day: 'Feb 5th at 2:30pm',\n        reminder: false,\n    },\n    ])\n  //useState takes in the initial states, tasks is the current state, and setTasks is the function that updates tasks\n\n//Add Task\nconst addTask = (task) => {\n  const id = Math.floor(Math.random() * 10000) + 1\n\n  const newTask = {id, ...task}\n  setTasks([...tasks, newTask])\n}\n//inputs of task, day and reminder plus the new random task id creates the newTask\n//we then use setTasks to concatenate existing tasks with the newTask\n\n//Delete Task\nconst deleteTask = (id) => {\n  setTasks(tasks.filter((task) => task.id !== id))\n}\n//Setting tasks to filtered tasks\n//we filter the tasks array. id is the task id that we want to delete, and task.id is the same thing. Since they are always the same, they won't pass the function. \n//When new array is created by filter()， the elements that we want to delete won't exist anymore.\n//If every element's id is not the same as the id being passed in (the id of the task that we are trying to delete)\n//return tasks that has a different id from the task id being passed in (the id that we are trying to delete) Unselected tasks gets to stay in the filtered array\n\n//Toggle Reminder\nconst toggleReminder = (id) => {\n  setTasks(tasks.map((task) => task.id === id ? { ...task, reminder: !task.reminder } : task))\n}\n//For every element in the tasks array, if the element id is the same as the id being passed in, it means we want to toggle that particular task, therefore we \n//set reminder to whatever opposite of task.reminder has\n//if nothing is passed in (no doubleClick), just display task normally\n\n  return (\n    <div className=\"container\">\n      <Header onAdd={() => setShowAddTask(!showAddTask)}/>\n      {/*props can be defined within its component (Ex. title={1} or title='String' ), defaultProps will appear if not specified */}\n      {/*The component Header contains the header which is made up of a title as well as a button component */}\n      {/*onAdd in the header passes in a function to the header which sets showAddTask to the opposite of what it has now */}\n      {showAddTask && <AddTask onAdd={addTask} /> }\n      {/*if showAddTask is true, then we show AddTask which returns a form requiring inputs of text, day and reminder*/}\n      {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />  : 'No tasks to show'}\n      {/*current state tasks array gets passed down as parameter into Tasks.js and the array get looped displaying all the texts */}\n      {/*The function deleteTask gets passed down as parameter onDelete to Tasks.js which gets further passed down to Task.js */}\n      {/*if the number of tasks is bigger than 0, show Tasks. Else show 'No tasks to show' */}\n    </div>\n  );\n}\n\n/*class App extends React.Component {\n  render() {\n    return <h1>Hello from a class</h1>\n  }\n}*/\n//Class Component\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}