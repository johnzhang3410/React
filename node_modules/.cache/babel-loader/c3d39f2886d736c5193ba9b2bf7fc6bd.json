{"ast":null,"code":"import _slicedToArray from\"C:/Users/johnz/Desktop/WebDev/learn-react/react-task-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AddTask=function AddTask(_ref){var onAdd=_ref.onAdd;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),text=_useState2[0],setText=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),day=_useState4[0],setDay=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),reminder=_useState6[0],setReminder=_useState6[1];//The original text/day which is empty is the original value for input, use setText/setDay to change text/day\n//The original reminder is set to false (Checkbox unchecked)\nvar onSubmit=function onSubmit(e){e.preventDefault();if(!text){alert('Please add a task');return;}onAdd({text:text,day:day,reminder:reminder});setText('');setDay('');setReminder(false);};//This function gets called when we are submitting the add-form\n//if there is no task text, then we pop an alert\n//If there indeed is input, then we call onAdd to add the task with its inputs of text, day, and reminder (T/F)\n//after adding the task to task array, we reset everything to their default state (no text/day in inputs, and reminder set to false)\nreturn/*#__PURE__*/_jsxs(\"form\",{className:\"add-form\",onSubmit:onSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-control\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Task\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"add Task\",value:text,onChange:function onChange(e){return setText(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-control\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Day and Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"add Day & Time\",value:day,onChange:function onChange(e){return setDay(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-control form-control-check\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Set Reminder\"}),/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",value:reminder,onChange:function onChange(e){return setReminder(e.currentTarget.checked);},checked:reminder})]}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Save Task\",className:\"btn btn-block\"})]});};export default AddTask;","map":{"version":3,"sources":["C:/Users/johnz/Desktop/WebDev/learn-react/react-task-tracker/src/components/AddTask.js"],"names":["React","useState","AddTask","onAdd","text","setText","day","setDay","reminder","setReminder","onSubmit","e","preventDefault","alert","target","value","currentTarget","checked"],"mappings":"mLAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,QAAR,KAAuB,OAAvB,C,wFAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAAe,IAAZC,CAAAA,KAAY,MAAZA,KAAY,CAC3B,cAAwBF,QAAQ,CAAE,EAAF,CAAhC,wCAAOG,IAAP,eAAaC,OAAb,eACA,eAAsBJ,QAAQ,CAAE,EAAF,CAA9B,yCAAOK,GAAP,eAAYC,MAAZ,eACA,eAAgCN,QAAQ,CAAE,KAAF,CAAxC,yCAAOO,QAAP,eAAiBC,WAAjB,eACA;AACA;AAEJ,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,CAAD,CAAO,CACpBA,CAAC,CAACC,cAAF,GAEA,GAAI,CAACR,IAAL,CAAW,CACPS,KAAK,CAAC,mBAAD,CAAL,CACA,OACH,CAEDV,KAAK,CAAC,CAAEC,IAAI,CAAJA,IAAF,CAAQE,GAAG,CAAHA,GAAR,CAAaE,QAAQ,CAARA,QAAb,CAAD,CAAL,CAEAH,OAAO,CAAC,EAAD,CAAP,CACAE,MAAM,CAAC,EAAD,CAAN,CACAE,WAAW,CAAC,KAAD,CAAX,CACH,CAbD,CAcA;AACA;AACA;AACA;AAEI,mBACI,cAAM,SAAS,CAAC,UAAhB,CAA2B,QAAQ,CAAEC,QAArC,wBACI,aAAK,SAAS,CAAC,cAAf,wBACI,+BADJ,cAEI,cAAO,IAAI,CAAC,MAAZ,CAAmB,WAAW,CAAC,UAA/B,CAA0C,KAAK,CAAEN,IAAjD,CAAuD,QAAQ,CAAE,kBAACO,CAAD,QAAON,CAAAA,OAAO,CAACM,CAAC,CAACG,MAAF,CAASC,KAAV,CAAd,EAAjE,EAFJ,GADJ,cAMI,aAAK,SAAS,CAAC,cAAf,wBACI,uCADJ,cAEI,cAAO,IAAI,CAAC,MAAZ,CAAmB,WAAW,CAAC,gBAA/B,CAAgD,KAAK,CAAET,GAAvD,CAA4D,QAAQ,CAAE,kBAACK,CAAD,QAAOJ,CAAAA,MAAM,CAACI,CAAC,CAACG,MAAF,CAASC,KAAV,CAAb,EAAtE,EAFJ,GANJ,cAWI,aAAK,SAAS,CAAC,iCAAf,wBACI,uCADJ,cAEI,cAAO,IAAI,CAAC,UAAZ,CAAuB,KAAK,CAAEP,QAA9B,CAAwC,QAAQ,CAAE,kBAACG,CAAD,QAAOF,CAAAA,WAAW,CAACE,CAAC,CAACK,aAAF,CAAgBC,OAAjB,CAAlB,EAAlD,CAA+F,OAAO,CAAET,QAAxG,EAFJ,GAXJ,cAiBI,cAAO,IAAI,CAAC,QAAZ,CAAqB,KAAK,CAAC,WAA3B,CAAuC,SAAS,CAAC,eAAjD,EAjBJ,GADJ,CAqBH,CA/CD,CAiDA,cAAeN,CAAAA,OAAf","sourcesContent":["import React from 'react'\r\nimport {useState} from 'react'\r\n\r\nconst AddTask = ( {onAdd} ) => {\r\n    const [text, setText] = useState ('')\r\n    const [day, setDay] = useState ('')\r\n    const [reminder, setReminder] = useState (false)\r\n    //The original text/day which is empty is the original value for input, use setText/setDay to change text/day\r\n    //The original reminder is set to false (Checkbox unchecked)\r\n\r\nconst onSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (!text) {\r\n        alert('Please add a task')\r\n        return\r\n    }\r\n\r\n    onAdd({ text, day, reminder })\r\n\r\n    setText('')\r\n    setDay('')\r\n    setReminder(false)\r\n}\r\n//This function gets called when we are submitting the add-form\r\n//if there is no task text, then we pop an alert\r\n//If there indeed is input, then we call onAdd to add the task with its inputs of text, day, and reminder (T/F)\r\n//after adding the task to task array, we reset everything to their default state (no text/day in inputs, and reminder set to false)\r\n\r\n    return (\r\n        <form className='add-form' onSubmit={onSubmit}>\r\n            <div className='form-control'>\r\n                <label>Task</label>\r\n                <input type='text' placeholder='add Task' value={text} onChange={(e) => setText(e.target.value)} />\r\n            </div>\r\n                {/* When user tries to change the text, we use setText with new text being what is entered */ }\r\n            <div className='form-control'>\r\n                <label>Day and Time</label>\r\n                <input type='text' placeholder='add Day & Time' value={day} onChange={(e) => setDay(e.target.value)} />\r\n            </div>\r\n                {/* When changes happen to the input, we change day by setDay to the value entered (The value of event target) */ }\r\n            <div className='form-control form-control-check'>\r\n                <label>Set Reminder</label>\r\n                <input type='checkbox' value={reminder} onChange={(e) => setReminder(e.currentTarget.checked)} checked={reminder} />\r\n            </div>\r\n                {/* when user makes change to the checkbox, we use setReminder to change the box to whatever the current target is (true or false) */ }\r\n                {/*the checkbox will be checked when reminder is true, else it will be unchecked (reminder false (default)) */ }\r\n            <input type='submit' value='Save Task' className='btn btn-block' />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTask\r\n"]},"metadata":{},"sourceType":"module"}